!function(e){var t={};function n(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=17)}([function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",s=e[3];if(!s)return n;if(t&&"function"==typeof btoa){var i=(o=s,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),r=s.sources.map(function(e){return"/*# sourceURL="+s.sourceRoot+e+" */"});return[n].concat(r).concat([i]).join("\n")}var o;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var s={},i=0;i<this.length;i++){var r=this[i][0];"number"==typeof r&&(s[r]=!0)}for(i=0;i<e.length;i++){var o=e[i];"number"==typeof o[0]&&s[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),t.push(o))}},t}},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  position: relative;\n  display: block;\n  height: 370px;\n  overflow: hidden; }\n\ndiv {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  height: 350px; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  position: absolute;\n  padding: 5px 0; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  flex: 1; }\n\nsvg {\n  display: block;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  overflow: visible; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  position: relative;\n  display: block;\n  height: 50px;\n  margin-top: 50px; }\n\ndiv {\n  background: rgba(204, 204, 204, 0.2);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  z-index: 9; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  position: absolute;\n  display: block;\n  height: 100%;\n  border-top: 2px solid rgba(204, 204, 204, 0.5);\n  border-bottom: 2px solid rgba(204, 204, 204, 0.5);\n  display: flex;\n  justify-content: space-between;\n  box-sizing: border-box;\n  z-index: 9; }\n\ndiv {\n  background: rgba(204, 204, 204, 0.5);\n  width: 5px;\n  height: 100%; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  display: block;\n  border: 1px solid #ccc;\n  padding: 7px;\n  border-radius: 100px; }\n\n.container {\n  display: block;\n  position: relative;\n  padding-left: 35px;\n  cursor: pointer;\n  font-size: 17px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n\n.container:active,\n.container:focus {\n  background: none; }\n\n.container input {\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0; }\n\n.checkmark {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 25px;\n  width: 25px;\n  background: #2196f3;\n  border-radius: 50%; }\n\n.checkmark:after {\n  content: '';\n  position: absolute;\n  transition: 0.2s all; }\n\n.checkmark:before {\n  content: '';\n  position: absolute;\n  transition: 0.2s all;\n  border-radius: 50%;\n  left: 7%;\n  top: 7%;\n  right: 7%;\n  bottom: 7%;\n  background: #fff; }\n\n.container input:checked ~ .checkmark:before {\n  left: 50%;\n  top: 50%;\n  right: 50%;\n  bottom: 50%; }\n\n.container input:checked ~ .checkmark:after {\n  transform: rotate(45deg) scaleY(1); }\n\n.container .checkmark:after {\n  left: 9px;\n  top: 5px;\n  width: 5px;\n  height: 10px;\n  border: solid white;\n  border-width: 0 3px 3px 0;\n  transform: rotate(45deg) scaleY(0.5); }\n\n.name {\n  height: 25px;\n  display: flex;\n  align-items: center;\n  font-family: Roboto;\n  color: #828282; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  display: flex; }\n\ntoggler-view:not(:last-child) {\n  margin-right: 7px; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  display: block;\n  margin-bottom: 50px; }\n\ntogglers-shell {\n  margin-top: 20px; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  position: absolute;\n  display: block;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 25px; }\n\ndiv {\n  flex: 1;\n  border-bottom: 1px solid rgba(204, 204, 204, 0.5);\n  color: #828282;\n  display: flex;\n  align-items: flex-end; }\n",""])},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,":host {\n  position: absolute;\n  display: flex;\n  height: 20px;\n  transform: translateY(100%);\n  left: 0;\n  right: 0;\n  bottom: 0; }\n\ndiv {\n  flex: 1;\n  color: #828282;\n  display: flex;\n  align-items: flex-end;\n  justify-content: center; }\n",""])},function(e){e.exports=[{columns:[["x",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],["y0",37,20,32,39,32,35,19,65,36,62,113,69,120,60,51,49,71,122,149,69,57,21,33,55,92,62,47,50,56,116,63,60,55,65,76,33,45,64,54,81,180,123,106,37,60,70,46,68,46,51,33,57,75,70,95,70,50,68,63,66,53,38,52,109,121,53,36,71,96,55,58,29,31,55,52,44,126,191,73,87,255,278,219,170,129,125,126,84,65,53,154,57,71,64,75,72,39,47,52,73,89,156,86,105,88,45,33,56,142,124,114,64],["y1",22,12,30,40,33,23,18,41,45,69,57,61,70,47,31,34,40,55,27,57,48,32,40,49,54,49,34,51,51,51,66,51,94,60,64,28,44,96,49,73,30,88,63,42,56,67,52,67,35,61,40,55,63,61,105,59,51,76,63,57,47,56,51,98,103,62,54,104,48,41,41,37,30,28,26,37,65,86,70,81,54,74,70,50,74,79,85,62,36,46,68,43,66,50,28,66,39,23,63,74,83,66,40,60,29,36,27,54,89,50,73,52]],types:{y0:"line",y1:"line",x:"x"},names:{y0:"#0",y1:"#1"},colors:{y0:"#3DC23F",y1:"#F34C44"}},{columns:[["x",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],["y0",6706,7579,7798,8307,7866,7736,7816,7630,7536,7105,7178,7619,7917,7483,5772,5700,5435,4837,4716,4890,4753,4820,4538,12162,39444,25765,18012,14421,13249,11310,10377,9399,8917,8259,7902,9442,47596,36160,23866,18500,15488,13722,12270,13413,10574,7092,7159,7880,8821,8306,7780,7963,7837,7611,7334,7413,7015,6742,6557,6593,6680,6725,6345,5988,6365,9911,28833,19694,14873,11911,10498,9708,8893,8365,7960,7694,45529,42858,31508,23289,19147,15874,14551,13124,11778,10809,10522,9918,9436,8617,8765,8194,8035,7865,7573,7422,7047,7147,6861,6669,6363,12073,32381,21390,15311,12819,11655,10696,9678,9143,8296,7852],["y1",3522,4088,4146,4477,4202,4157,4177,4203,4223,3948,3946,3898,3979,4052,3279,3229,3302,3040,3054,2982,3077,2965,2973,5148,22485,13077,9055,7446,6824,5995,5787,5367,4997,4689,4630,4785,22365,15244,10626,8666,7681,6929,6219,6367,5402,4932,4844,5146,5265,4887,4714,4722,4718,4693,4746,4819,4455,4419,4323,4407,4277,11589,6100,5076,4769,8929,14002,9756,7520,6343,5633,5415,5052,4850,4624,4480,14102,24005,14263,10845,9028,7755,7197,7001,6737,6254,6150,5922,5603,5048,5423,5003,5035,4747,4814,4661,4462,4516,4221,4111,4053,12515,15781,10499,8175,6831,6287,5990,5590,5148,4760,4809]],types:{y0:"line",y1:"line",x:"x"},names:{y0:"#0",y1:"#1"},colors:{y0:"#3DC23F",y1:"#F34C44"}},{columns:[["x",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],["y0",4747,4849,5045,5184,5746,5400,5424,5576,6436,5337,4840,5379,4678,4736,5074,4897,4349,5089,4543,5033,5047,4871,4812,4723,4545,4723,4721,4384,4277,4682,4805,4001,4610,5241,5113,4059,4529,4673,5291,5154,5123,5535,5540,5161,5666,5584,6999,6854,5083,5361,5863,5792,5586,6106,5481,5532,5853,5809,6244,6156,5596,5426,5422,5413,4795,5113,5279,5530,4939,4983,4984,5527,5765,5001,5818,6061,5956,5288,5837,5703,5440,5238,5957,6432,6389,6064,7065,5981,5779,6567,6320,5634,6023,5702,6066,5797,6163,6182,4906,5637,7073,6679,5831,6015,6266,6128,6156,6218,6050,6140,5877,7147],["y1",4605,5036,4956,5168,5008,5069,5223,5360,5695,5209,4796,5028,4931,5123,4987,4964,4982,5037,5050,5144,5049,4971,4911,4792,4562,4597,4759,4761,4646,4543,4597,4428,4213,4270,3961,4784,4699,4711,4855,4717,4563,4923,5041,4895,4877,5001,5410,5033,5045,5184,4976,5207,5354,5205,4887,4831,5083,5148,5369,5176,5022,4880,4969,5135,4836,4764,4782,4783,4646,4755,4744,4932,5059,4851,4614,4718,5018,5034,5223,5007,4839,4763,4761,5048,5330,5106,5956,5135,5006,4919,5511,5114,5122,5314,5089,5022,4918,4986,4626,4675,4951,4921,5173,5145,5209,4967,5030,5120,5030,4946,4795,5224]],types:{y0:"line",y1:"line",x:"x"},names:{y0:"#0",y1:"#1"},colors:{y0:"#3DC23F",y1:"#F34C44"}},{columns:[["x",15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5],["y0",41,31,62,65,66,79,52,26,42,68,71,86,65,54,33,70,52,68,75,92,69,28,33,84,65,56,42,44,26,34,45,49,83,83,66,31,43,55,57,55,54,45,51,64,27,19,38,38,44,49,42,50,60,73,86,65,51,54,48,61,82,83,53,52,48,64,96,103,68,73,58,42,81,80,76,106,93,65,69,104,75,79,92,73,49,63,76,79,83,70,55,47,42,111,93,74,99,107,52,65,80,82,74,154,106,39,40,77,85,66,52,25],["y1",19,10,36,41,28,39,24,16,14,40,39,37,47,28,16,32,25,29,36,45,38,11,25,37,35,22,25,30,16,20,32,34,37,26,31,10,19,32,34,23,25,22,21,18,11,18,18,23,11,18,22,19,27,27,30,25,27,23,28,30,23,31,27,16,30,21,36,33,25,34,16,24,37,33,26,24,31,21,37,32,35,31,30,27,15,17,38,40,32,34,30,17,21,28,36,30,24,25,20,24,22,42,34,47,40,29,29,31,39,30,29,18]],types:{y0:"line",y1:"line",x:"x"},names:{y0:"#0",y1:"#1"},colors:{y0:"#3DC23F",y1:"#F34C44"}},{columns:[["x",15200352e5,15201216e5,1520208e6,15202944e5,15203808e5,15204672e5,15205536e5,152064e7,15207264e5,15208128e5,15208992e5,15209856e5,1521072e6,15211584e5,15212448e5,15213312e5,15214176e5,1521504e6,15215904e5,15216768e5,15217632e5,15218496e5,1521936e6,15220224e5,15221088e5,15221952e5,15222816e5,1522368e6,15224544e5,15225408e5,15226272e5,15227136e5,15228e8,15228864e5,15229728e5,15230592e5,15231456e5,1523232e6,15233184e5,15234048e5,15234912e5,15235776e5,1523664e6,15237504e5,15238368e5,15239232e5,15240096e5,1524096e6,15241824e5,15242688e5,15243552e5,15244416e5,1524528e6,15246144e5,15247008e5,15247872e5,15248736e5,152496e7,15250464e5,15251328e5,15252192e5,15253056e5,1525392e6,15254784e5,15255648e5,15256512e5,15257376e5,1525824e6,15259104e5,15259968e5,15260832e5,15261696e5,1526256e6,15263424e5,15264288e5,15265152e5,15266016e5,1526688e6,15267744e5,15268608e5,15269472e5,15270336e5,152712e7,15272064e5,15272928e5,15273792e5,15274656e5,1527552e6,15276384e5,15277248e5,15278112e5,15278976e5,1527984e6,15280704e5,15281568e5,15282432e5,15283296e5,1528416e6,15285024e5,15285888e5,15286752e5,15287616e5,1528848e6,15289344e5,15290208e5,15291072e5,15291936e5,152928e7,15293664e5,15294528e5,15295392e5,15296256e5,1529712e6,15297984e5,15298848e5,15299712e5,15300576e5,1530144e6,15302304e5,15303168e5,15304032e5,15304896e5,1530576e6,15306624e5,15307488e5,15308352e5,15309216e5,1531008e6,15310944e5,15311808e5,15312672e5,15313536e5,153144e7,15315264e5,15316128e5,15316992e5,15317856e5,1531872e6,15319584e5,15320448e5,15321312e5,15322176e5,1532304e6,15323904e5,15324768e5,15325632e5,15326496e5,1532736e6,15328224e5,15329088e5,15329952e5,15330816e5,1533168e6,15332544e5,15333408e5,15334272e5,15335136e5,15336e8,15336864e5,15337728e5,15338592e5,15339456e5,1534032e6,15341184e5,15342048e5,15342912e5,15343776e5,1534464e6,15345504e5,15346368e5,15347232e5,15348096e5,1534896e6,15349824e5,15350688e5,15351552e5,15352416e5,1535328e6,15354144e5,15355008e5,15355872e5,15356736e5,153576e7,15358464e5,15359328e5,15360192e5,15361056e5,1536192e6,15362784e5,15363648e5,15364512e5,15365376e5,1536624e6,15367104e5,15367968e5,15368832e5,15369696e5,1537056e6,15371424e5,15372288e5,15373152e5,15374016e5,1537488e6,15375744e5,15376608e5,15377472e5,15378336e5,153792e7,15380064e5,15380928e5,15381792e5,15382656e5,1538352e6,15384384e5,15385248e5,15386112e5,15386976e5,1538784e6,15388704e5,15389568e5,15390432e5,15391296e5,1539216e6,15393024e5,15393888e5,15394752e5,15395616e5,1539648e6,15397344e5,15398208e5,15399072e5,15399936e5,154008e7,15401664e5,15402528e5,15403392e5,15404256e5,1540512e6,15405984e5,15406848e5,15407712e5,15408576e5,1540944e6,15410304e5,15411168e5,15412032e5,15412896e5,1541376e6,15414624e5,15415488e5,15416352e5,15417216e5,1541808e6,15418944e5,15419808e5,15420672e5,15421536e5,154224e7,15423264e5,15424128e5,15424992e5,15425856e5,1542672e6,15427584e5,15428448e5,15429312e5,15430176e5,1543104e6,15431904e5,15432768e5,15433632e5,15434496e5,1543536e6,15436224e5,15437088e5,15437952e5,15438816e5,1543968e6,15440544e5,15441408e5,15442272e5,15443136e5,15444e8,15444864e5,15445728e5,15446592e5,15447456e5,1544832e6,15449184e5,15450048e5,15450912e5,15451776e5,1545264e6,15453504e5,15454368e5,15455232e5,15456096e5,1545696e6,15457824e5,15458688e5,15459552e5,15460416e5,1546128e6,15462144e5,15463008e5,15463872e5,15464736e5,154656e7,15466464e5,15467328e5,15468192e5,15469056e5,1546992e6,15470784e5,15471648e5,15472512e5,15473376e5,1547424e6,15475104e5,15475968e5,15476832e5,15477696e5,1547856e6,15479424e5,15480288e5,15481152e5,15482016e5,1548288e6,15483744e5,15484608e5,15485472e5,15486336e5,154872e7,15488064e5,15488928e5,15489792e5,15490656e5,1549152e6,15492384e5,15493248e5,15494112e5,15494976e5,1549584e6,15496704e5,15497568e5,15498432e5,15499296e5,1550016e6,15501024e5,15501888e5,15502752e5,15503616e5,1550448e6,15505344e5,15506208e5,15507072e5,15507936e5,155088e7,15509664e5,15510528e5,15511392e5,15512256e5,1551312e6,15513984e5,15514848e5,15515712e5,15516576e5,1551744e6,15518304e5,15519168e5,15520032e5,15520896e5],["y0",2298660,2253410,2515820,2506600,2460240,2408400,2317430,2240100,2295900,2609800,2594200,2626400,2615e3,2617800,2394500,2391100,2608300,2676e3,2637700,2766600,3186500,3067700,2570700,2935e3,2949200,2913500,2763600,3216300,2343500,2361e3,258e4,2591800,2595200,2569500,2587700,2372500,2351200,2465600,2625100,2651300,2686700,2783300,2417400,2383800,2736300,2751100,2678900,2622300,2586e3,2365700,2407700,2541300,2600400,2581500,2576200,2550100,2334500,2139400,2015400,2019900,2210100,2191800,2240700,2107400,2026900,2258e3,2255200,2123200,2267800,2236100,2065700,2093300,2315300,2333200,2349800,2318300,2275e3,2110300,2077100,2335200,2357400,235e4,2293800,2303600,2118700,2100300,2219700,2361100,2349500,2347800,2318400,2141600,2178600,2432500,2448700,2440300,2450100,2424100,2229900,2152400,2402600,2401e3,2418100,2408600,2408400,2212600,2189e3,2450800,2444500,2451900,2451e3,2442600,2287900,2221100,2451900,2460200,2460900,2319900,2270300,2183800,2195300,2485e3,2460900,2500600,2495300,2479100,2290600,2235800,2459900,2484500,2491e3,2525600,2477300,2223700,2146700,2528200,2567800,2556300,2540700,2503e3,2301200,2251600,2538600,2596500,2553900,2534200,2527300,2337400,2332900,2688500,2585700,2559600,2651600,2586800,2445700,2472300,2633e3,2664600,2649400,2648900,2644600,2406400,2426200,2694e3,2740600,2711800,2700900,2645800,2422800,2438500,2697500,2712500,2690300,2684400,2517300,2435300,2444300,2781800,2807800,2804500,2771300,2798800,2633300,2597100,2946300,2889800,2949600,2951400,2928800,2701400,2709900,3012900,3019100,2977200,3012400,2989800,2752100,2749100,3033300,3050400,3023800,3066400,3047800,2792200,2799300,3096100,3132500,3082400,3071200,3021400,2818300,2737500,3037800,3123700,3138900,3181800,3118500,2834500,2826900,3171e3,3175900,3184300,3195800,3129100,2834100,2876800,3019e3,3214e3,3227900,3189600,3187800,2886800,2880500,3218200,3253700,3260400,3243300,3204e3,2962700,2968600,3282100,3618900,3017e3,3037300,3044500,2758900,2784600,3032900,3132400,3075800,3108200,3076200,2851800,2837800,3107500,3146800,3145100,3145300,3158400,2872100,2823800,3190400,3209300,3170800,3195300,3183e3,2910300,2937400,3297100,3293600,3278400,3234200,3224e3,3013900,2955300,3303900,3323300,3352600,3348400,3340600,3110600,3066400,3409200,3462100,3394200,3383100,3433700,3184e3,3092700,3417400,4505200,3094500,3106100,3083200,3005600,2866700,2984100,2954200,3086800,3070500,3040900,2903500,3592500,3316200,2930500,2961900,3009600,3027200,2871600,2831600,2881700,3054200,3116600,3120800,3157300,2950700,2982700,3192800,3223300,3219500,3235900,3214100,3004400,2963500,3280400,3262400,3256e3,3258400,3264900,3107500,3057400,3326600,3332400,3357e3,3365100,3359500,3127400,3130200,3367100,3422700,3436400,3431100,36e5,3146100,3170900,3467300,3483400,3473600,3454700,3390200,3213600,3188800,3498200,3498600,3493500,3478900,3446400,3239200,3229100,3559600,3563600,3549800,3577300,3524400,3282500,3271300,3599200,3575200,3554400,3540300,3450600,2812e3],["y1",1130400,1065370,1211030,1215590,1206540,1206720,1085450,1047320,1071720,1253170,1261050,1264660,1260240,1264840,1130440,1121660,1294120,1290780,1284540,1302860,1296810,1165450,1128830,1302070,1304470,1307090,1268e3,1302160,1159330,1163530,1327140,1320680,1319200,1306810,1287990,1121240,1145070,1132400,1310310,1329340,1340060,1333530,1167040,1153260,1356930,1366500,1375970,1378570,1357460,1192240,1188650,1386450,1400570,1395730,1404160,1378120,1195410,1082e3,1189660,1197540,1367850,1389070,1386300,1282240,1209450,1409070,1409450,1271120,1424860,1399990,1240640,1248530,1451770,1460240,1466100,1460990,1446730,1268830,1263270,1473530,1476230,1480760,1460520,1454730,1263910,1227240,1303900,1474760,1473400,1477380,1466790,1285620,1280100,1491820,1499660,1496260,1485990,1473140,1301290,1273440,1487420,1494560,1500790,1508660,1489400,1301960,1297680,1501170,1503e3,1488980,1501170,1479060,1367980,1296050,1493920,1487830,1479120,1338410,1318550,1266620,1285640,1487970,1489080,1489580,1475400,1471140,1316010,1271940,1476160,1480670,1491030,1480940,1477640,1305750,1296770,1483400,1494440,1495740,1485900,1484400,1319160,1284010,1488140,1502910,1503450,1485410,1498200,1323200,1303150,1506840,1523440,1521490,1516770,1504300,1327520,1307630,1518100,1521370,1521280,1521660,1517700,1349880,1333010,1543800,1553730,1546490,1541710,1532690,1367020,1354040,1560080,1564990,1565050,1561110,1406570,1340850,1368550,1600180,1630760,1621360,1636580,1652580,1489550,1465750,1731080,1730190,1732260,1730210,1724800,1519480,1520490,1758280,1774530,1770690,1781100,1762270,1551690,1541620,1787290,1795490,1802940,1799130,1778850,1560040,1564580,1822410,1819680,1812390,1814100,1798060,1587880,1589320,1833920,1843420,1851460,1845550,1822980,1596860,1595900,1866e3,1860480,1862600,1863950,1827540,1585280,1588970,1683930,1879500,1883300,1879040,1846160,1639090,1632580,1895780,1897620,1906e3,1906730,1895290,1670120,1670190,1914360,1932890,1933160,1921800,1898720,1673530,1685190,1937730,1951850,1949900,1949020,1923160,1718450,1704040,1964800,1975140,2002510,1985340,1959ey2",820900,766050,894390,894540,887590,814490,786610,744660,770920,930330,930190,942060,933690,922280,810770,809760,952010,959070,957020,955890,948250,825710,804970,958480,959090,970200,907010,950150,825240,820890,971020,973560,967940,960360,931820,795020,753860,808740,97e4,981020,979810,975840,829690,819300,992290,998040,1006540,1013790,995130,848190,851890,1024210,1032210,1032290,1027510,1010090,850110,741740,844400,850410,1006690,1018470,1011630,916990,861050,1039650,1032640,904200,1045560,1022330,888970,896300,1073460,1074860,1074820,1074880,1057340,909410,906710,1078860,1092760,1083360,1078680,1067310,903090,858360,947540,1089590,1095060,1093130,1070660,915380,916530,1108410,1109460,1097230,1094520,1074630,915520,915750,1101730,1104580,1107930,1116850,1106360,928500,928210,1110530,1103230,1099970,1106180,1096060,982050,932620,1100880,1099970,1080040,959480,951360,902160,916070,1094120,1092530,1089290,1081760,1073320,937320,900010,1084910,1082620,1080960,1074050,1077810,925090,913970,1082900,1089240,1088890,1088720,1084170,938750,904060,1091540,1093660,1104520,1085860,1091880,939720,919790,1098590,1110310,1105580,1105220,1096580,940670,923480,1102360,1102760,1102280,1108680,1109210,955490,944730,1125380,1127440,1123070,1123910,1121160,966340,946940,1141980,1146790,1147420,1132920,990870,946370,964610,1171550,1187e3,1186370,1199100,1213ee3,1401510,1189880,1309810,1380230,1383630,1254140,1216830,1243860,1442240,1481680,1480680,1490700,1315410,1300930,1530520,1532340,1539150,1541510,1532770,1344910,1325530,1563330,1568490,1580110,1575130,1564880,1369810,1359060,1608230,1605640,1605970,1601640,1590810,1381740,1375190,1625850,1621800,1629910,1628510,1609760,1397880,1392180,1647700,1646770,1644200,1667150,1610910,1408450,1395010,1652870,1658870,1660310,1659060,1629490,1435450,1407720,1675610,1682450,1682070,1693010,1669030,1448500,1439490,1710110,1702690,1707e3,1662770,1512800,1101660],["y3",409540,377260,456380,460230,452020,389350,397230,369e3,382180,473570,477470,477550,478030,466150,397480,406380,494570,494680,482810,487700,475090,400520,397940,484160,487740,493260,434500,475410,398650,404690,491980,493410,485250,484740,465490,377460,353960,396390,493300,497560,495110,485260,394770,402910,500540,506260,509680,514010,494350,405360,412560,513030,521320,515730,518170,499850,394960,328510,406450,408080,501980,507800,496990,442530,414260,525770,513440,442660,526810,500190,426220,436110,546820,543480,545420,540530,527770,431050,443100,549550,551600,548120,542290,528810,435370,407250,463200,553640,554110,555820,536470,440460,447740,563330,561850,556430,550910,539440,441200,442310,563100,563760,559230,570870,555280,447750,455570,564630,562510,556050,555560,556470,484080,451320,561060,553630,540660,473500,472500,438550,447590,548670,549580,539920,541510,540380,450260,432260,535950,545160,543810,536990,539680,446570,444470,543450,549070,547840,541430,540200,450080,431800,549290,545890,556300,536500,543890,450890,440180,550850,554740,553460,553440,546420,446710,436640,553270,547750,551920,547610,545500,449220,447510,560050,561560,561560,556630,559340,461630,456300,569070,574800,575220,566180,472200,450530,462960,590290,597250,592970,604870,613050,512200,495980,649860,645070,636950,647120,630390,518820,525990,661700,659770,660650,669560,644510,529610,539520,673850,668530,673770,669480,654540,536090,548400,690100,684900,687040,685940,666360,560140,553050,696740,694490,703e3,697980,674460,548230,557370,697150,700110,701170,695810,669780,543500,540170,597430,711500,699770,698520,682170,568380,572950,715580,716050,720770,720660,695220,572970,578170,722280,724280,727910,719820,699840,580870,586270,729850,733680,726590,731270,709330,593070,600500,743590,743690,767660,747140,730510,607540,610480,762440,772960,763480,758490,741090,614450,645760,831130,792100,780410,778620,761e3,643620,650320,802640,805900,803960,800580,783660,648310,668150,825940,818650,816630,821e3,782790,657850,671660,817660,816020,821380,816280,800240,712510,648060,711170,709110,802240,792710,772260,691490,636050,649450,566120,651310,701910,702270,627880,605290,621710,744830,762830,765640,764140,648720,642430,786580,778790,780060,789170,772600,652160,648950,795360,802250,808010,801890,793490,669240,665310,814370,810880,814580,813950,802070,670450,674250,823010,820620,821400,820760,804300,681870,681460,831580,835600,835390,840770,810700,675170,680870,832e3,836790,845630,844560,821810,690310,683810,851150,848090,846480,858340,831290,696470,695540,866980,868190,861720,834530,706650,439140]],types:{y0:"line",y1:"line",y2:"line",y3:"line",x:"x"},names:{y0:"#0",y1:"#1",y2:"#2",y3:"#3"},colors:{y0:"#cb513a",y1:"#73c03a",y2:"#65b9ac",y3:"#4682b4"}}]},function(e,t,n){var s=n(14);"string"==typeof s&&(s=[[e.i,s,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(15)(s,i);s.locals&&(e.exports=s.locals)},function(e,t,n){(e.exports=n(0)(!1)).push([e.i,"body {\n  padding: 0 20px; }\n",""])},function(e,t,n){var s,i,r={},o=(s=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=s.apply(this,arguments)),i}),a=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var s=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(e){s=null}t[e]=s}return t[e]}}(),h=null,l=0,c=[],d=n(16);function p(e,t){for(var n=0;n<e.length;n++){var s=e[n],i=r[s.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](s.parts[o]);for(;o<s.parts.length;o++)i.parts.push(v(s.parts[o],t))}else{var a=[];for(o=0;o<s.parts.length;o++)a.push(v(s.parts[o],t));r[s.id]={id:s.id,refs:1,parts:a}}}}function u(e,t){for(var n=[],s={},i=0;i<e.length;i++){var r=e[i],o=t.base?r[0]+t.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};s[o]?s[o].parts.push(a):n.push(s[o]={id:o,parts:[a]})}return n}function g(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var s=c[c.length-1];if("top"===e.insertAt)s?s.nextSibling?n.insertBefore(t,s.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=a(e.insertAt.before,n);n.insertBefore(t,i)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var s=function(){0;return n.nc}();s&&(e.attrs.nonce=s)}return E(t,e.attrs),g(e,t),t}function E(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,s,i,r;if(t.transform&&e.css){if(!(r="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=r}if(t.singleton){var o=l++;n=h||(h=m(t)),s=w.bind(null,n,o,!1),i=w.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",E(t,e.attrs),g(e,t),t}(t),s=function(e,t,n){var s=n.css,i=n.sourceMap,r=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||r)&&(s=d(s));i&&(s+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var o=new Blob([s],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,n,t),i=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),s=function(e,t){var n=t.css,s=t.media;s&&e.setAttribute("media",s);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){f(n)});return s(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;s(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=u(e,t);return p(n,t),function(e){for(var s=[],i=0;i<n.length;i++){var o=n[i];(a=r[o.id]).refs--,s.push(a)}e&&p(u(e,t),t);for(i=0;i<s.length;i++){var a;if(0===(a=s[i]).refs){for(var h=0;h<a.parts.length;h++)a.parts[h]();delete r[a.id]}}}};var b,y=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,s){var i=n?"":s.css;if(e.styleSheet)e.styleSheet.cssText=y(t,i);else{var r=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(r,o[t]):e.appendChild(r)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,s=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,r=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?e:(i=0===r.indexOf("//")?r:0===r.indexOf("/")?n+r:s+r.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){"use strict";n.r(t);n(13);var s=n(1);var i=n(2);var r=n(3);var o=n(4);var a=n(5);class h{constructor(e,t,n,s,i){this.parentEl=t,this.containerEl=e,this.startBorderEl=n,this.endBorderEl=s,this.options=i}init(){this._registerListeners(),requestAnimationFrame(()=>this.options.dispatchBoundsChangeEvent(this._getRectInPercentages(this.containerEl)))}dispose(){}_registerListeners(){document.addEventListener("mousedown",this._mousedownProcess.bind(this)),document.addEventListener("touchstart",this._mousedownProcess.bind(this)),document.addEventListener("mouseup",this._mouseupProcess.bind(this)),document.addEventListener("touchend",this._mouseupProcess.bind(this)),document.addEventListener("mousemove",this._mousemoveProcess.bind(this)),document.addEventListener("touchmove",this._mousemoveProcess.bind(this)),document.addEventListener("dragstart",()=>!1)}_detectTargetEl(e){const t=e.composedPath(),n=-1!==t.indexOf(this.containerEl),s=-1!==t.indexOf(this.startBorderEl),i=-1!==t.indexOf(this.endBorderEl);return{isContainer:n&&!s&!i,isStartBorder:s,isEndBorder:i}}_mousedownProcess(e){const{isContainer:t,isStartBorder:n,isEndBorder:s}=this._detectTargetEl(e);t&&(this.containerTakenOptions={shiftXLeft:e.pageX-this._getShiftCoords(this.containerEl).left,shiftXRight:e.pageX-this._getShiftCoords(this.containerEl).right,width:this._getRectInPercentages(this.containerEl).width}),n&&(this.startBorderTakenOptions={shiftX:e.pageX-this._getShiftCoords(this.startBorderEl).left}),s&&(this.endBorderTakenOptions={shiftX:e.pageX-this._getShiftCoords(this.endBorderEl).right})}_mouseupProcess(){this.containerTakenOptions=null,this.startBorderTakenOptions=null,this.endBorderTakenOptions=null}_mousemoveProcess(e){this.startBorderTakenOptions&&this._startBorderDraggingProcess(e,this.startBorderTakenOptions.shiftX,this.options.minWidth),this.endBorderTakenOptions&&this._endBorderDraggingProcess(e,this.endBorderTakenOptions.shiftX,this.options.minWidth),this.containerTakenOptions&&(this._startBorderDraggingProcess(e,this.containerTakenOptions.shiftXLeft,this.containerTakenOptions.width),this._endBorderDraggingProcess(e,this.containerTakenOptions.shiftXRight,this.containerTakenOptions.width)),(this.startBorderTakenOptions||this.endBorderTakenOptions||this.containerTakenOptions)&&this.options.dispatchBoundsChangeEvent(this._getRectInPercentages(this.containerEl))}_startBorderDraggingProcess(e,t,n){const s=e.touches?e.touches[0].pageX:e.pageX,{left:i,width:r}=this.parentEl.getBoundingClientRect(),o=100*(s-t-i)/r;if(100-this._getRectInPercentages(this.containerEl).right-o<n){const{right:e}=this._getRectInPercentages(this.containerEl);this.containerEl.style.left=100-e-n+"%"}else this.containerEl.style.left=o<0?"0%":o+"%"}_endBorderDraggingProcess(e,t,n){const s=e.touches?e.touches[0].pageX:e.pageX,{left:i,width:r}=this.parentEl.getBoundingClientRect(),o=100-100*(s-t-i)/r;if(100-parseFloat(this.containerEl.style.left)-o<n){const{left:e}=this._getRectInPercentages(this.containerEl);this.containerEl.style.right=100-e-n+"%"}else this.containerEl.style.right=o<0?"0%":o+"%"}_getShiftCoords(e){const t=e.getBoundingClientRect();return{left:t.left+pageXOffset,right:t.right+pageXOffset}}_getRectInPercentages({style:e}){const t=parseFloat(e.left),n=parseFloat(e.right);return{left:t,right:n,width:100-n-t}}}var l=n(6);var c=n(7);var d=n(8);class p{constructor(e,t){this.graphs=e,this.xAxis=t}}class u{constructor(e,t){this.nodes=e,this.lines=t}}class g{constructor(e,t,n,s,i){this.startPoint=e,this.endPoint=t,this.color=n,this.name=s,this.extrema=i||null}}const f=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];class m{build(e){const t=this._computeGraphs(e),n=this._computeXAxisValues(e);return new p(t,n)}assignExtrema(e){const t=this._findExtrema(e);e.map(({lines:e})=>e.forEach(e=>e.extrema=t))}_findExtrema(e){const t=e.filter(({lines:e})=>!e[0].disabled).reduce((e,{nodes:t})=>[...e,...t],[]);return Math.max(...t)}_computeGraphs({types:e,names:t,colors:n,columns:s}){let i=Object.keys(e).reduce((t,n)=>("line"===e[n]&&t.push(n),t),[]).reduce((e,i)=>{const r=s.find(e=>e[0]===i).filter(e=>Number.isInteger(e)),o=t[i],a=n[i],h=this._computeLines(r,a,o),l=new u(r,h);return e.push(l),e},[]);return this.assignExtrema(i),i}_computeLines(e,t,n){const s=[];for(let i=0,r=1;i<e.length-2;i++,r++)s.push(new g(e[i],e[r],t,n));return s}_computeXAxisValues({types:e,columns:t}){const n=Object.keys(e).find(e=>"x"===e);return t.find(e=>e[0]===n).reduce((e,t)=>{if(Number.isInteger(t)){const n=new Date(t),s=`${f[n.getMonth()]} ${n.getDay()+1}`;e.push(s)}return e},[])}}var E=n(9);var v=n(10);var b=n(11);customElements.define("graph-view",class extends HTMLElement{constructor(){super(),this._init()}set graph(e){this._graph=e,this._renderLines()}get graph(){return this._graph}set height(e){this.linesList.forEach(t=>t.height=e)}set rerender(e){this.linesList.forEach(t=>t.rerender=e)}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");e.textContent=i[0][1],this.shadowRoot.appendChild(e)}_renderLines(){this.linesList=[],this._graph.lines.forEach(e=>{const t=document.createElement("graph-line");t.line=e,this.shadowRoot.appendChild(t),this.linesList.push(t)})}}),customElements.define("graph-line",class extends HTMLElement{constructor(){super(),this._init()}set line(e){this._line=e,this._renderLine()}get line(){return this._line}set height(e){this._height=e,this._updateLinePaddings()}get height(){return this._height}set rerender(e){this._updateLinePaddings()}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");e.textContent=r[0][1],this.shadowRoot.appendChild(e)}_renderLine(){this.svgEl||(this.svgEl=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.lineEl=document.createElementNS("http://www.w3.org/2000/svg","line"),this.svgEl.appendChild(this.lineEl),this.shadowRoot.appendChild(this.svgEl)),this.lineEl.setAttribute("stroke",this.line.color),this.lineEl.setAttribute("stroke-width",2),this.lineEl.setAttribute("stroke-linecap","round"),this._updateLineDirection()}_updateLineDirection(){this.line.startPoint<=this.line.endPoint?(this.lineEl.setAttribute("x1","0%"),this.lineEl.setAttribute("x2","100%"),this.lineEl.setAttribute("y1","100%"),this.lineEl.setAttribute("y2","0%")):(this.lineEl.setAttribute("x1","0%"),this.lineEl.setAttribute("x2","100%"),this.lineEl.setAttribute("y1","0%"),this.lineEl.setAttribute("y2","100%"))}_updateLinePaddings(){this.svgEl.style.display=this.line.disabled?"none":"block",this.svgEl.style.transition=this.svgEl.style.paddingTop?"0.3s all":"none";const e=this.line.startPoint<this.line.endPoint?this.line.endPoint:this.line.startPoint,t=this.line.startPoint<this.line.endPoint?this.line.startPoint:this.line.endPoint,n=this.height-e*this.height/this.line.extrema,s=t*this.height/this.line.extrema;this.svgEl.style.paddingTop=n+"px",this.svgEl.style.paddingBottom=s+"px"}}),customElements.define("chart-view",class extends HTMLElement{constructor(){super(),this._init()}set chart(e){this._chart=e,this.axesViewEl.chart=e,this._renderGraphs()}set rerender(e){this.graphViewList.forEach(t=>t.rerender=e),this.axesViewEl.rerender=e}set graphPreviewBounds({left:e,right:t,width:n}){this.container.style.left=e/n*-100+"%",this.container.style.right=t/n*-100+"%",this.axesViewEl.graphPreviewBounds={left:e,right:t,width:n}}get chart(){return this._chart}connectedCallback(){const e=this.container.offsetHeight;this.graphViewList.forEach(t=>t.height=e)}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");this.axesViewEl=document.createElement("axes-view"),e.textContent=s[0][1],this.shadowRoot.appendChild(e),this.shadowRoot.appendChild(this.axesViewEl)}_renderGraphs(){this.graphViewList=[],this.container=document.createElement("div"),this.chart.graphs.forEach(e=>{const t=document.createElement("graph-view");t.graph=e,this.container.appendChild(t),this.graphViewList.push(t)}),this.shadowRoot.appendChild(this.container)}}),customElements.define("graph-preview",class extends HTMLElement{constructor(){super(),this._init()}set chart(e){this._chart=e,this._renderGraphs()}get chart(){return this._chart}set rerender(e){this.graphViewList.forEach(t=>t.rerender=e)}connectedCallback(){const e=this.offsetHeight;this.viewportPreviewEl.addEventListener("boundsChange",({detail:e})=>{this._dispatchBoundsChangeEvent(e),this._updateBackdropBounds(e)}),this.graphViewList.forEach(t=>t.height=e)}_dispatchBoundsChangeEvent(e){const t=new CustomEvent("boundsChange",{detail:e});this.dispatchEvent(t)}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");this.viewportPreviewEl=document.createElement("viewport-preview"),this.viewportPreviewEl.parentEl=this,e.textContent=o[0][1],this.shadowRoot.appendChild(e),this.shadowRoot.appendChild(this.viewportPreviewEl),this._renderBackdrop()}_renderGraphs(){this.graphViewList=[],this.chart.graphs.forEach(e=>{const t=document.createElement("graph-view");t.graph=e,this.shadowRoot.appendChild(t),this.graphViewList.push(t)})}_renderBackdrop(){this.startBackdropEl=document.createElement("div"),this.endBackdropEl=document.createElement("div"),this.shadowRoot.appendChild(this.startBackdropEl),this.shadowRoot.appendChild(this.endBackdropEl)}_updateBackdropBounds({left:e,right:t}){this.startBackdropEl.style.left="0%",this.startBackdropEl.style.right=100-e+"%",this.endBackdropEl.style.right="0%",this.endBackdropEl.style.left=100-t+"%"}}),customElements.define("viewport-preview",class extends HTMLElement{constructor(){super(),this._init()}disconnectedCallback(){this.viewportPreviewManager&&this.viewportPreviewManager.dispose()}connectedCallback(){this.style.left="40%",this.style.right="40%";const e=document.createElement("div"),t=document.createElement("div");this.defaultOptions={minWidth:10,dispatchBoundsChangeEvent:this._dispatchBoundsChangeEvent.bind(this)},this.viewportPreviewManager=new h(this,this.parentEl,e,t,this.defaultOptions),this.viewportPreviewManager.init(),this.shadowRoot.appendChild(e),this.shadowRoot.appendChild(t)}set parentEl(e){this._parentEl=e}get parentEl(){return this._parentEl}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");e.textContent=a[0][1],this.shadowRoot.appendChild(e)}_dispatchBoundsChangeEvent(e){const t=new CustomEvent("boundsChange",{detail:e});this.dispatchEvent(t)}}),customElements.define("toggler-view",class extends HTMLElement{constructor(){super(),this._init()}set graph(e){this._graph=e,this._renderToogler()}get graph(){return this._graph}get options(){return{color:this.graph.lines[0].color,name:this.graph.lines[0].name}}get checked(){return this.inputEl.checked}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");e.textContent=l[0][1],this.shadowRoot.appendChild(e)}_renderToogler(){const{name:e,color:t}=this.options;this.containerEl=document.createElement("label"),this.inputEl=document.createElement("input"),this.checkmarkEl=document.createElement("div"),this.labelEl=document.createElement("div"),this.inputEl.setAttribute("type","checkbox"),this.inputEl.setAttribute("checked","checked"),this.containerEl.setAttribute("class","container"),this.checkmarkEl.setAttribute("class","checkmark"),this.labelEl.setAttribute("class","name"),requestAnimationFrame(()=>this.checkmarkEl.style.background=t),this.labelEl.textContent=e,this.containerEl.appendChild(this.labelEl),this.containerEl.appendChild(this.inputEl),this.containerEl.appendChild(this.checkmarkEl),this.shadowRoot.appendChild(this.containerEl)}}),customElements.define("togglers-shell",class extends HTMLElement{constructor(){super(),this._init()}set chart(e){e!==this._chart&&(this._chart=e,this._renderToggles())}get chart(){return this._chart}connectedCallback(){this.addEventListener("click",e=>{const t=e.composedPath();t[0]instanceof HTMLInputElement&&t.some(e=>this.togglerViewList.some(({containerEl:t})=>e===t))&&this._updateDisabledState()})}_updateDisabledState(){this.chart.graphs.forEach(e=>{const{checked:t}=this.togglerViewList.find(({graph:t})=>e===t);e.lines.forEach(e=>e.disabled=!t)}),this._dispatchTogglersChangeEvent(this.chart)}_dispatchTogglersChangeEvent(e){const t=new CustomEvent("togglersChange",{detail:e});this.dispatchEvent(t)}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");e.textContent=c[0][1],this.shadowRoot.appendChild(e)}_renderToggles(){this.togglerViewList=[],this.chart.graphs.forEach(e=>{const t=document.createElement("toggler-view");t.graph=e,this.togglerViewList.push(t),this.shadowRoot.appendChild(t)})}}),customElements.define("chart-shell",class extends HTMLElement{constructor(){super(),this._init()}set chart(e){this._chart=e,this._renderCharts()}get chart(){return this._chart}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");e.textContent=d[0][1],this.shadowRoot.appendChild(e)}_renderCharts(){this.chartEl=document.createElement("chart-view"),this.graphPreviewEl=document.createElement("graph-preview"),this.togglersShellEl=document.createElement("togglers-shell"),this.processedChart=(new m).build(this.chart),this.chartEl.chart=this.processedChart,this.graphPreviewEl.chart=this.processedChart,this.togglersShellEl.chart=this.processedChart,this.shadowRoot.appendChild(this.chartEl),this.shadowRoot.appendChild(this.graphPreviewEl),this.shadowRoot.appendChild(this.togglersShellEl),this.graphPreviewEl.addEventListener("boundsChange",({detail:e})=>this.chartEl.graphPreviewBounds=e),this.togglersShellEl.addEventListener("togglersChange",()=>this._triggerRerender())}_triggerRerender(){(new m).assignExtrema(this.processedChart.graphs),this.chartEl.rerender=!0,this.graphPreviewEl.rerender=!0}}),customElements.define("axes-view",class extends HTMLElement{constructor(){super(),this._init()}set chart(e){this.yAxisEl.chart=e}set graphPreviewBounds(e){this.yAxisEl.graphPreviewBounds=e}set rerender(e){this.yAxisEl.rerender=e}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");this.yAxisEl=document.createElement("y-axis"),e.textContent=E[0][1],this.shadowRoot.appendChild(e),this.shadowRoot.appendChild(this.yAxisEl)}}),customElements.define("y-axis",class extends HTMLElement{constructor(){super(),this._init()}set chart(e){this._chart=e,this._updateLabels()}get chart(){return this._chart}set graphPreviewBounds(e){this._updateLabels()}set rerender(e){this._updateLabels()}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");e.textContent=v[0][1],this.shadowRoot.appendChild(e),this._renderGrades()}_renderGrades(){this.gradesCount=6,this.gradeList=[];for(let e=0;e<this.gradesCount;e++){const e=document.createElement("div");this.shadowRoot.appendChild(e),this.gradeList.push(e)}this.gradeList.reverse()}_updateLabels(){const e=this.chart.graphs[0].lines[0].extrema,t=Math.floor(e/this.gradesCount);for(let n=0,s=0;n<e;n+=t,s++)this.gradeList[s]&&(this.gradeList[s].textContent=n)}}),customElements.define("x-axis",class extends HTMLElement{constructor(){super(),this._init()}set chart(e){this._chart=e,this._renderGrades(),this._updateLabels()}get chart(){return this._chart}set graphPreviewBounds(e){this._updateLabels()}_init(){this.attachShadow({mode:"open"});const e=document.createElement("style");e.textContent=b[0][1],this.shadowRoot.appendChild(e)}_renderGrades(){this.gradeList=[];for(let e=0;e<this.chart.xAxis.length;e++){const e=document.createElement("div");this.shadowRoot.appendChild(e),this.gradeList.push(e)}this.gradeList.reverse()}_updateLabels(){this.chart.xAxis.forEach((e,t)=>{this.gradeList[t].textContent=e})}}),n(12).forEach(e=>{const t=document.createElement("chart-shell");t.chart=e,document.body.appendChild(t)})}]);
//# sourceMappingURL=app.c23e8c55.js.map